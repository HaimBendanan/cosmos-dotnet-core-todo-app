@model IEnumerable<todo.Models.Item>

@{
    ViewBag.Title = "List of To-Do Items";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>💉 SQL injection demo</h1>
<p>This is a demo to-do app, where users can manage their to-do items.</p>
<p>Users have access to their personal to-dos.</p>
<p>The app is running on AspNET MVC core, the backend is using Cosmos DB to store data.</p>
<p>By using a SQL injection vulnerability in the backend, we are able to read all the to-do items in the Cosmos DB collection, including items that belong to other users.</p>

<div>
   <div style="width:45%;display:inline;">
    @Html.ActionLink("Hardened list", "GoodList", new {}, new  {@class = "btn btn-default" })
   </div>
   <div style="width:45%;display:inline;">
    @Html.ActionLink("Vulnerable list", "VulnerableList", new {}, new  {@class = "btn btn-default" })
   </div>
</div>
@* @await Component.InvokeAsync("GoodList", new {}) *@


@* <p>
     @{ Html.RenderAction("~/Views/Item/GoodList.cshtml", "GoodList"); }
</p> *@

@* <p>
     @{ Html.RenderAction("VulnerableList", "Item"); }
</p> 

<p>
     @{ Html.RenderPartial("~/Views/Item/VulnerableList.cshtml", new List<todo.Models.Item>()); }
</p>  *@